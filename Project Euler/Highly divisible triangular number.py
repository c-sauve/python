'''

# Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''
import datetime
from math import sqrt

start_time = datetime.datetime.now()
counter = 1
triangle_divisors_length = 100
found_triangle = {0: 0}

# First we need to get a list of triangle numbers.


def get_triangle_size(var_triangle_number):
    triangle_counter = 0
    for numbers in range(1, var_triangle_number + 1):
        triangle_counter = triangle_counter + numbers
    return {var_triangle_number: triangle_counter}


def get_divisors(var_triangle):
    triangle_divisors = []
    for check_divisors in range(1, int(var_triangle / 2) + 1):
        if var_triangle % check_divisors == 0:
            triangle_divisors.append(check_divisors)
    return triangle_divisors


while len(get_divisors(found_triangle[counter - 1])) < triangle_divisors_length:
    found_triangle = get_triangle_size(counter)

    time_diff = (datetime.datetime.now() - start_time)
    if int(time_diff.total_seconds()) % 30 == 0:
        print("Script running " + str(datetime.datetime.now()))
        print(found_triangle)
    # print("counter " + str(counter) + " Divisors " + str(len(get_divisors(found_triangle[counter]))))
    counter += 1


print(found_triangle)
print(counter)
print(get_divisors(found_triangle[counter - 1]))
print(len(get_divisors(56623104)))
# So with the above code... it "works" it just takes WAY TOO long to find the answer :,(
#   i've gone to seek out other mathematical solutions to help the code run faster.

#new_counter = 1
#cont = True
#while cont:
#    limit = int(sqrt(new_counter))
#    divisors_list = []
#    for i in range(1, limit+1, 1):
#        if new_counter % i == 0:
#            divisors_list.append(i)
#            if i != new_counter/i:
#                divisors_list.append(new_counter/i)
#    if len(divisors_list) >= 500:
#        print(len(divisors_list))
#        cont = False
#    print(new_counter)
#    new_counter += 1
#
